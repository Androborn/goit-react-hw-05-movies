{"version":3,"file":"static/js/184.fad1d48b.chunk.js","mappings":"iOAGaA,EAAeC,EAAAA,GAAAA,GAAH,sBAEZC,EAAYD,EAAAA,GAAAA,GAAH,wEAKTE,GAAaF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,sB,SCLR,SAASI,EAAT,GAAwC,IAAD,EAAjBC,EAAiB,EAAjBA,cAC7BC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACR,EAAD,iBACGM,QADH,IACGA,GADH,UACGA,EAAeG,eADlB,aACG,EAAwBC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OAC3B,SAACV,EAAD,WACE,SAACC,EAAD,CAAYU,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMR,GAAhD,SACGK,MAFWI,EAAAA,EAAAA,c,mJCLT,SAASC,IACtB,OAAuBC,EAAAA,EAAAA,MAAhBC,GAAP,eAIA,GAA0CC,EAAAA,EAAAA,GAFtB,eAIlBD,EAAaE,IAAI,UAFXf,EAAR,EAAQA,cAAegB,EAAvB,EAAuBA,QAASC,EAAhC,EAAgCA,MAOhC,OAFAC,EAAAA,GAAAA,MAAA,OAAYD,QAAZ,IAAYA,OAAZ,EAAYA,EAAOE,UAGjB,iCACE,SAAC,KAAD,IACCF,IAAS,SAAC,KAAD,IACTJ,EAAaE,IAAI,WAChB,SAAC,IAAD,CAAYf,cAAeA,IAE5BgB,IAAW,SAAC,IAAD,S,yGCzBZI,EAAQC,EAAQ,MAQTC,EAAuB,SAACC,EAAgBC,GAEnD,OADAJ,EAAMK,SAASC,QARA,6BASRN,EACJL,IADI,UAPS,IAOT,YACgBQ,GAAkB,CACrCI,OAAQ,CACNC,QAXQ,mCAYRC,SAViB,QAWjBC,cAVc,MAWdC,MAAOP,EACPQ,mBAXuB,qBAc1BC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACP,GAAIA,EACF,OAAOA,EAEP,MAAM,IAAIC,MAAM,oBCpBXrB,EAAiB,SAACS,EAAgBC,GAC7C,OAA0CY,EAAAA,EAAAA,UAAS,MAAnD,eAAOpC,EAAP,KAAsBqC,EAAtB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOpB,EAAP,KAAgBsB,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOnB,EAAP,KAAcsB,EAAd,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,uFACEF,GAAW,GADb,SAGwB,OAAhBd,EAHR,iEAM8BF,EACxBC,EACAC,GARN,cAMUiB,EANV,yBAUWJ,EAAiBI,IAV5B,kCAYIF,EAAS,EAAD,IAZZ,yBAcID,GAAW,GAdf,8EADc,uBAAC,WAAD,wBAkBdI,KACC,CAACnB,EAAgBC,IACb,CAAExB,cAAAA,EAAegB,QAAAA,EAASC,MAAAA,K,4HCFnC,IAiBIP,EAAS,WAGX,IAH0B,IAAdiC,EAAc,uDAAP,GACftC,EAAK,GACLuC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEftC,GADE2C,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAO3C","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/MoviesPage/MoviesPage.jsx","utils/http-services/themoviedb-api-service.js","hooks/useFetchMovies.js","../node_modules/nanoid/index.prod.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const ListedMovies = styled.ol``;\n\nexport const MovieLink = styled.li`\n  font-size: 1.5rem;\n  margin-bottom: 0.5rem;\n`;\n\nexport const StyledLink = styled(Link)``;\n","import { useLocation } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport { ListedMovies, MovieLink, StyledLink } from './MoviesList.styled';\n\nexport default function MoviesList({ fetchedMovies }) {\n  const location = useLocation();\n\n  return (\n    <ListedMovies>\n      {fetchedMovies?.results?.map(({ id, title }) => (\n        <MovieLink key={nanoid()}>\n          <StyledLink to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </StyledLink>\n        </MovieLink>\n      ))}\n    </ListedMovies>\n  );\n}\n\nMoviesList.propTypes = {\n  fetchedMovies: PropTypes.object,\n};\n","import { Outlet, useSearchParams } from 'react-router-dom';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { Loader } from '../../vendors';\nimport { useFetchMovies } from '../../hooks';\nimport MoviesList from '../MoviesList/MoviesList';\n\nexport default function MoviesPage() {\n  const [searchParams] = useSearchParams();\n\n  const searchedMovies = `search/movie`;\n\n  const { fetchedMovies, loading, error } = useFetchMovies(\n    searchedMovies,\n    searchParams.get('query')\n  );\n\n  toast.error(error?.message);\n\n  return (\n    <>\n      <Outlet />\n      {error && <Toaster />}\n      {searchParams.get('query') && (\n        <MoviesList fetchedMovies={fetchedMovies} />\n      )}\n      {loading && <Loader />}\n      {/* add no search match notification*/}\n    </>\n  );\n}\n","const axios = require('axios');\nconst BASE_URL = 'https://api.themoviedb.org';\nconst API_KEY = 'f979c5d182d240e48ce15515a9f4d973';\nconst AUTH_TYPE = '3';\nconst DEFAULT_LANGUAGE = 'en-US';\nconst ADULT_CONTENT = false;\nconst APPENDED_MOVIE_DETAILS = 'credits,reviews';\n\nexport const themoviedbApiService = (fetchParameter, searchQuery) => {\n  axios.defaults.baseURL = BASE_URL;\n  return axios\n    .get(`${AUTH_TYPE}/${fetchParameter}`, {\n      params: {\n        api_key: API_KEY,\n        language: DEFAULT_LANGUAGE,\n        include_adult: ADULT_CONTENT,\n        query: searchQuery,\n        append_to_response: APPENDED_MOVIE_DETAILS,\n      },\n    })\n    .then(({ data }) => {\n      if (data) {\n        return data;\n      } else {\n        throw new Error('Search error');\n      }\n    });\n};\n","import { useState, useEffect } from 'react';\n\nimport { themoviedbApiService } from '../utils';\n\nexport const useFetchMovies = (fetchParameter, searchQuery) => {\n  const [fetchedMovies, setFetchedMovies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      try {\n        if (searchQuery === null) {\n          return;\n        }\n        const fetchedData = await themoviedbApiService(\n          fetchParameter,\n          searchQuery\n        );\n        return setFetchedMovies(fetchedData);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, [fetchParameter, searchQuery]);\n  return { fetchedMovies, loading, error };\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nif (false) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["ListedMovies","styled","MovieLink","StyledLink","Link","MoviesList","fetchedMovies","location","useLocation","results","map","id","title","to","state","from","nanoid","MoviesPage","useSearchParams","searchParams","useFetchMovies","get","loading","error","toast","message","axios","require","themoviedbApiService","fetchParameter","searchQuery","defaults","baseURL","params","api_key","language","include_adult","query","append_to_response","then","data","Error","useState","setFetchedMovies","setLoading","setError","useEffect","fetchedData","fetchData","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}