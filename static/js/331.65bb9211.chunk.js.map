{"version":3,"file":"static/js/331.65bb9211.chunk.js","mappings":"8PAEaA,EAAWC,EAAAA,GAAAA,GAAH,8DAKRC,EAASD,EAAAA,GAAAA,EAAH,sBAENE,EAAYF,EAAAA,GAAAA,GAAH,+DAKTG,EAAaH,EAAAA,GAAAA,IAAH,wCAIVI,EAAYJ,EAAAA,GAAAA,EAAH,sBAETK,EAAYL,EAAAA,GAAAA,EAAH,sB,SCRP,SAASM,IACtB,OAIIC,EAAAA,EAAAA,MAFWC,GAFf,eAEIC,QAAWD,KAMf,OAAuB,IAAhBA,EAAKE,QACV,SAACT,EAAD,kDAEA,SAACF,EAAD,iBACGS,QADH,IACGA,OADH,EACGA,EAAMG,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,UAAvB,OACT,UAACZ,EAAD,YACE,SAACC,EAAD,CACEY,IAAI,QACJC,IACEJ,EAAY,UAZL,8BAYK,OAXR,SAWQ,OACkBA,GAC1BK,KAGR,SAACb,EAAD,UAAYS,KACZ,UAACR,EAAD,yBAAuBS,QAVTI,EAAAA,EAAAA,c,iJCCxB,IAiBIA,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL","sources":["components/MoviesPage/Cast/Cast.styled.jsx","components/MoviesPage/Cast/Cast.jsx","../node_modules/nanoid/index.prod.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const NoCast = styled.p``;\n\nexport const ActorInfo = styled.li`\n  margin-right: 2rem;\n  width: 10vw;\n`;\n\nexport const ActorThumb = styled.img`\n  width: 10vw;\n`;\n\nexport const ActorName = styled.p``;\n\nexport const Character = styled.p``;\n","import { useOutletContext } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport noActorPhoto from '../../../images/no_actor_photo.png';\nimport {\n  NoCast,\n  CastList,\n  ActorInfo,\n  ActorThumb,\n  ActorName,\n  Character,\n} from './Cast.styled';\n\nexport default function Cast() {\n  const [\n    {\n      credits: { cast },\n    },\n  ] = useOutletContext();\n  const imgBaseUrl = 'https://image.tmdb.org/t/p';\n  const imgSize = '/w200';\n\n  return cast.length === 0 ? (\n    <NoCast> We don't have cast for this movie</NoCast>\n  ) : (\n    <CastList>\n      {cast?.map(({ profile_path, name, character }) => (\n        <ActorInfo key={nanoid()}>\n          <ActorThumb\n            alt=\"actor\"\n            src={\n              profile_path\n                ? `${imgBaseUrl}${imgSize}${profile_path}`\n                : noActorPhoto\n            }\n          ></ActorThumb>\n          <ActorName>{name}</ActorName>\n          <Character>Character: {character}</Character>\n        </ActorInfo>\n      ))}\n    </CastList>\n  );\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nif (false) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["CastList","styled","NoCast","ActorInfo","ActorThumb","ActorName","Character","Cast","useOutletContext","cast","credits","length","map","profile_path","name","character","alt","src","noActorPhoto","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}