{"version":3,"file":"static/js/966.f2b56c37.chunk.js","mappings":"kPAEaA,EAAcC,EAAAA,GAAAA,GAAH,sBAEXC,EAAYD,EAAAA,GAAAA,EAAH,sBAETE,EAASF,EAAAA,GAAAA,GAAH,sBAENG,EAAeH,EAAAA,GAAAA,GAAH,sBAEZI,EAAaJ,EAAAA,GAAAA,EAAH,sB,SCAR,SAASK,IACtB,OAIIC,EAAAA,EAAAA,MAFWC,GAFf,eAEIC,QAAWD,QAIf,OAA2B,KAAb,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAASE,SACd,SAACR,EAAD,yDAEA,SAACF,EAAD,iBACGQ,QADH,IACGA,OADH,EACGA,EAASG,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACZ,UAACV,EAAD,YACE,UAACC,EAAD,sBAAuBQ,MACvB,SAACP,EAAD,UAAaQ,OAFFC,EAAAA,EAAAA,c,sDCKrB,IAiBIA,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL","sources":["components/MoviesPage/Reviews/Reviews.styled.jsx","components/MoviesPage/Reviews/Reviews.jsx","../node_modules/nanoid/index.prod.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul``;\n\nexport const NoReviews = styled.p``;\n\nexport const Review = styled.li``;\n\nexport const ReviewAuthor = styled.h3``;\n\nexport const ReviewText = styled.p``;\n","import { useOutletContext } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport {\n  ReviewsList,\n  NoReviews,\n  Review,\n  ReviewAuthor,\n  ReviewText,\n} from './Reviews.styled';\n\nexport default function Reviews() {\n  const [\n    {\n      reviews: { results },\n    },\n  ] = useOutletContext();\n\n  return results?.length === 0 ? (\n    <NoReviews> We don't have any reviews for this movie</NoReviews>\n  ) : (\n    <ReviewsList>\n      {results?.map(({ author, content }) => (\n        <Review key={nanoid()}>\n          <ReviewAuthor>Author: {author}</ReviewAuthor>\n          <ReviewText>{content}</ReviewText>\n        </Review>\n      ))}\n    </ReviewsList>\n  );\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nif (false) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["ReviewsList","styled","NoReviews","Review","ReviewAuthor","ReviewText","Reviews","useOutletContext","results","reviews","length","map","author","content","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}