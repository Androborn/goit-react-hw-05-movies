{"version":3,"file":"static/js/871.4f6e4abe.chunk.js","mappings":"+NAMe,SAASA,IACtB,IAEIC,GAAWC,EAAAA,EAAAA,MAEf,OACE,wBACGD,EAASE,MAAMC,KAAKC,KAAI,SAAAC,GAAK,OAC5B,2BACE,gBACEC,IAAI,QACJC,IACEF,EAAMG,aAAN,UAXO,8BAWP,OAVI,SAUJ,OAC8BH,EAAMG,cAChCC,KAGR,yBAAMJ,EAAMK,QACZ,yCAAiBL,EAAMM,gBAVhBC,EAAAA,EAAAA,c,iJCajB,IAiBIA,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL","sources":["components/MoviesPage/Cast/Cast.jsx","../node_modules/nanoid/index.prod.js"],"sourcesContent":["import { useLocation } from 'react-router-dom';\n\nimport { nanoid } from 'nanoid';\n\nimport noActorPhoto from '../../../images/no_actor_photo.png';\n\nexport default function Cast() {\n  const imgBaseUrl = 'https://image.tmdb.org/t/p';\n  const imgSize = '/w200';\n  let location = useLocation();\n\n  return (\n    <ul>\n      {location.state.cast.map(actor => (\n        <li key={nanoid()}>\n          <img\n            alt=\"actor\"\n            src={\n              actor.profile_path\n                ? `${imgBaseUrl}${imgSize}${actor.profile_path}`\n                : noActorPhoto\n            }\n          ></img>\n          <div>{actor.name}</div>\n          <div>Character: {actor.character}</div>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nif (false) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Cast","location","useLocation","state","cast","map","actor","alt","src","profile_path","noActorPhoto","name","character","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}